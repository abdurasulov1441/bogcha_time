import 'package:bogcha_time/common/my_custom_widgets/my_custom_button.dart';
import 'package:bogcha_time/common/my_custom_widgets/my_custom_textfield.dart';
import 'package:bogcha_time/common/style/app_colors.dart';
import 'package:bogcha_time/common/style/app_style.dart';
import 'package:bogcha_time/app/router.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class LinkChildPage extends StatefulWidget {
  const LinkChildPage({super.key});

  @override
  _LinkChildPageState createState() => _LinkChildPageState();
}

class _LinkChildPageState extends State<LinkChildPage> {
  final TextEditingController _codeController = TextEditingController();
  bool _isLoading = false;
  String _errorMessage = '';

  @override
  void dispose() {
    _codeController.dispose();
    super.dispose();
  }

  /// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∫–æ–¥—É
  Future<void> _linkChild(String code) async {
    if (code.isEmpty) {
      setState(() {
        _errorMessage = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥!';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _errorMessage = '';
    });

    try {
      var childSnapshot = await FirebaseFirestore.instance
          .collection('children')
          .where('unique_code', isEqualTo: code)
          .limit(1)
          .get();

      if (childSnapshot.docs.isNotEmpty) {
        var childDoc = childSnapshot.docs.first;

        if (childDoc['parent_id'] != null) {
          setState(() {
            _errorMessage = '–≠—Ç–æ—Ç —Ä–µ–±–µ–Ω–æ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é!';
          });
          return;
        }

        String parentId = "parent_123"; // üîπ –ó–¥–µ—Å—å –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π ID —Ä–æ–¥–∏—Ç–µ–ª—è (–∑–∞–º–µ–Ω–∏ –Ω–∞ auth)
        await childDoc.reference.update({'parent_id': parentId});

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–†–µ–±–µ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!')),
        );
        Navigator.pop(context);
      } else {
        setState(() {
          _errorMessage = '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = '–û—à–∏–±–∫–∞: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.backgroundColor,
      appBar: AppBar(
        centerTitle: true,
        backgroundColor: AppColors.backgroundColor,
        title: Text('–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–±–µ–Ω–∫–∞', style: AppStyle.fontStyle.copyWith(fontSize: 20)),
        elevation: 0,
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const SizedBox(height: 10),

           
            Center(
              child: Text(
                '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥',
                style: AppStyle.fontStyle.copyWith(fontSize: 18,),
                textAlign: TextAlign.center,
              ),
            ),

            const SizedBox(height: 30),

            /// üîπ –ù–µ–æ–º–æ—Ä—Ñ–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            NeumorphicTextField(
              controller: _codeController,
              hintText: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥',
              isEmailvalidator: false,
            ),

            const SizedBox(height: 20),

            /// üîπ –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞"
            NeumorphicButton(
              text: "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞",
              isDisabled: _isLoading,
              onPressed: () => _linkChild(_codeController.text.trim()),
            ),

            if (_errorMessage.isNotEmpty) ...[
              const SizedBox(height: 10),
              Center(
                child: Text(
                  _errorMessage,
                  style: TextStyle(color: Colors.red, fontSize: 14),
                ),
              ),
            ],

            const SizedBox(height: 30),
            const Divider(),
            const SizedBox(height: 10),

           
            NeumorphicButton(
              text: "üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥",
              onPressed: () => context.push(Routes.qrCodePage),
            ),

            const SizedBox(height: 10),
            Spacer(),
            NeumorphicButton(
              
              text: '–ü–æ–¥—Ä–æ–±—Ä–∞–Ω—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', onPressed: () {
              context.push(Routes.qrInstruction);
            }),
          ],
        ),
      ),
    );
  }
}
