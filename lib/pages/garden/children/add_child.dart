import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:uuid/uuid.dart';

class AddChildScreen extends StatefulWidget {
  final String groupId; // üìå –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–±–µ–Ω–∫–∞

  const AddChildScreen({super.key, required this.groupId});

  @override
  _AddChildScreenState createState() => _AddChildScreenState();
}

class _AddChildScreenState extends State<AddChildScreen> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _surnameController = TextEditingController();
  final TextEditingController _lastNameController = TextEditingController();
  final TextEditingController _birthdateController = TextEditingController();
  String? _selectedGender;
  bool _isLoading = false;

  final _formKey = GlobalKey<FormState>();

  Future<void> _addChild() async {
    if (!_formKey.currentState!.validate() || _selectedGender == null) return;

    setState(() {
      _isLoading = true;
    });

    try {
      User? user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        throw "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
      }

      String gardenId = user.uid; // üìå UID –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞
      String uniqueCode = const Uuid().v4().substring(0, 8); // üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥

      await FirebaseFirestore.instance
          .collection('garden')
          .doc(gardenId)
          .collection('children')
          .add({
        'unique_code': uniqueCode,
        'child_name': _nameController.text.trim(),
        'child_surname': _surnameController.text.trim(),
        'child_last_name': _lastNameController.text.trim(),
        'child_birthdate': _birthdateController.text.trim(),
        'child_gender': _selectedGender,
        'child_photo': '',
        'metrika_photo': '',
        'parent_id': null, // üìå –ü—Ä–∏–≤—è–∂–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–º
        'group_id': widget.groupId, // üìå –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        'created_at': FieldValue.serverTimestamp(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–†–µ–±–µ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ö–æ–¥: $uniqueCode')),
      );

      Navigator.pop(context);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞: $e')),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _surnameController.dispose();
    _lastNameController.dispose();
    _birthdateController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildTextField(_nameController, '–ò–º—è —Ä–µ–±–µ–Ω–∫–∞'),
                _buildTextField(_surnameController, '–§–∞–º–∏–ª–∏—è —Ä–µ–±–µ–Ω–∫–∞'),
                _buildTextField(_lastNameController, '–û—Ç—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ–Ω–∫–∞'),
                _buildTextField(_birthdateController, '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–≥–≥–≥-–º–º-–¥–¥)'),
                const SizedBox(height: 10),

                /// –í—ã–±–æ—Ä –ø–æ–ª–∞
                const Text("–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞", style: TextStyle(fontWeight: FontWeight.bold)),
                Row(
                  children: [
                    Expanded(
                      child: RadioListTile<String>(
                        title: const Text("–ú–∞–ª—å—á–∏–∫"),
                        value: "–ú–∞–ª—å—á–∏–∫",
                        groupValue: _selectedGender,
                        onChanged: (value) {
                          setState(() {
                            _selectedGender = value;
                          });
                        },
                      ),
                    ),
                    Expanded(
                      child: RadioListTile<String>(
                        title: const Text("–î–µ–≤–æ—á–∫–∞"),
                        value: "–î–µ–≤–æ—á–∫–∞",
                        groupValue: _selectedGender,
                        onChanged: (value) {
                          setState(() {
                            _selectedGender = value;
                          });
                        },
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 20),

                /// –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞"
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: _isLoading ? null : _addChild,
                    child: _isLoading
                        ? const CircularProgressIndicator()
                        : const Text("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞"),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  /// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
  Widget _buildTextField(TextEditingController controller, String hintText) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: TextFormField(
        controller: controller,
        decoration: InputDecoration(
          labelText: hintText,
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
        ),
        validator: (value) => value == null || value.isEmpty ? "–í–≤–µ–¥–∏—Ç–µ $hintText" : null,
      ),
    );
  }
}
